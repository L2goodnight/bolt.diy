name: Build & Export bolt.diy images (downloadable)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: '镜像标签（留空则用短 SHA）'
        required: false
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'app/**'
      - 'functions/**'
      - 'docker-compose.yaml'

env:
  IMAGE_NAME: bolt-diy
  PNPM_VERSION: 8.15.8
  TARGET: bolt-ai-development

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ linux/amd64, linux/arm64 ]
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 生成镜像标签
        id: vars
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: （可见日志）打印平台与标签
        run: |
          echo "Platform: ${{ matrix.platform }}"
          echo "Tag: ${{ steps.vars.outputs.tag }}"

      - name: 临时修补 Dockerfile 以避免 corepack/pnpm 构建失败
        run: |
          set -e
          if grep -q "corepack enable pnpm" Dockerfile; then
            echo "[patch] 替换 corepack/pnpm 安装步骤为固定版本 $PNPM_VERSION"
            sed -i "s/corepack enable pnpm && pnpm install/npm install -g pnpm@${PNPM_VERSION} \&\& pnpm install --frozen-lockfile/" Dockerfile
          else
            echo "[patch] 未发现 corepack 相关命令，跳过"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      # 导出为 docker-archive（可直接 docker load）
      - name: Build (single-arch) and export to tar
        run: |
          mkdir -p dist
          OUT="dist/${{ env.IMAGE_NAME }}_${{ steps.vars.outputs.tag }}_${{ matrix.platform//\//- }}.tar"
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --target ${{ env.TARGET }} \
            -t ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.tag }} \
            --output type=docker,dest="${OUT}" \
            .
          ls -lh "${OUT}"

      - name: Gzip the tar
        run: |
          FILE="dist/${{ env.IMAGE_NAME }}_${{ steps.vars.outputs.tag }}_${{ matrix.platform//\//- }}.tar"
          gzip -9 "${FILE}"
          ls -lh dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-${{ steps.vars.outputs.tag }}-${{ matrix.platform//\//- }}
          path: dist/*.tar.gz
          compression-level: 0   # 已 gzip，不再二次压缩
          retention-days: 14
