name: build-linux-x64-offline-bundles

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to build (branch/tag/sha)'
        required: false
        default: 'stable'

jobs:
  appimage:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout (${{ github.event.inputs.ref }})
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 1

      - name: Setup Node.js 20 + Corepack(pnpm)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: |
          corepack enable
          corepack install

      - name: Cache pnpm store
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: pnpm-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: pnpm-${{ runner.os }}-

      - name: Install system deps for packaging
        run: |
          sudo apt-get update
          sudo apt-get install -y libarchive-tools xz-utils rpm

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build web assets
        run: pnpm run build

      - name: Build Electron Linux x64 (AppImage + deb)
        run: npx electron-builder --linux AppImage deb --x64

      - name: Upload desktop artifacts
        uses: actions/upload-artifact@v4
        with:
          name: boltdiy-linux-x64-desktop
          path: |
            dist/*.AppImage
            dist/*.deb
          if-no-files-found: error

  docker:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout (${{ github.event.inputs.ref }})
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 1

      - name: Build Docker image (development target)
        run: |
          docker build . --target bolt-ai-development -t boltdiy:${{ github.event.inputs.ref }}-x64

      - name: Export image as tar.gz
        run: |
          docker save boltdiy:${{ github.event.inputs.ref }}-x64 | gzip > boltdiy-${{ github.event.inputs.ref }}-x64.tar.gz

      - name: Upload docker image tar
        uses: actions/upload-artifact@v4
        with:
          name: boltdiy-${{ github.event.inputs.ref }}-x64-docker
          path: boltdiy-${{ github.event.inputs.ref }}-x64.tar.gz
          if-no-files-found: error
